dn42/�����������������������������������������������������������������������������������������������0000755�0000000�0000000�00000000000�14266103041�010320� 5����������������������������������������������������������������������������������������������������ustar  �root����������������������������root�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/boot.conf��������������������������������������������������������������������������������������0000644�0000000�0000000�00000002044�14266066573�012154� 0����������������������������������������������������������������������������������������������������ustar  �root����������������������������root�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������# Version: 2022072001

router id LOCAL_IPV4;

protocol device {
        scan time 10;
}

protocol direct {
        ipv4;
        ipv6;
        check link;
        interface "dn42-router", "dn42-router-*";
}

protocol kernel kernel4 {
        scan time 10;
        kernel table 42;
        ipv4 {
                import none;
                export filter {
                        if source ~ [RTS_STATIC] then {
                                if proto != "BLACKHOLE_PREFIXS_V4" then reject;
                        }
                        krt_prefsrc = LOCAL_IPV4;
                        accept;
                };
        };
}

protocol kernel kernel6 {
        scan time 10;
        kernel table 42;
        ipv6 {
                import none;
                export filter {
                        if source ~ [RTS_STATIC] then {
                                if proto != "BLACKHOLE_PREFIXS_V6" then reject;
                        }
                        krt_prefsrc = LOCAL_IPV6;
                        accept;
                };
        };
};
��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/ebgp_filters.conf������������������������������������������������������������������������������0000644�0000000�0000000�00000011506�14266077336�013660� 0����������������������������������������������������������������������������������������������������ustar  �root����������������������������root�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������# Version: 2022072001

function ebgp_blackhole_in() {
        if (65535, 666) ~ bgp_community then {
                case net.type {
                        NET_IP4: bgp_next_hop = 172.20.56.15;
                        NET_IP6: bgp_next_hop = fd00:bb:5bf3:ffff:ffff:ffff:ffff:ffff;
                        else: print "ebgp_blackhole_in: unexpected net.type ", net.type, " ", net; return false;
                }
                dest = RTD_BLACKHOLE;
        }
        return true;
}

function ebgp_blackhole_out_pair(pair p) {
        if bgp_large_community ~ [(LOCAL_ASN, 666, *)] then {
                bgp_community.add(p);
        }
        return true;
}

function ebgp_blackhole_out_lc(lc l) {
        if bgp_large_community ~ [(LOCAL_ASN, 666, *)] then {
                bgp_large_community.add(l);
        }
        return true;
}

function ebgp_peer_in_v4(int peeras; int default_local_pref; int link_latency; int link_bandwidth; int link_crypto) {
        if net !~ DN42_VALID_PREFIXES_V4 then return false;
        if bgp_path ~ INTERNAL_ASN_SET then return false;
        bgp_large_community.delete([(LOCAL_ASN, *, *)]);
        bgp_large_community.add((LOCAL_ASN, 200, peeras));
        bgp_large_community.add((LOCAL_ASN, NODE_ID, peeras));
        if (roa_check(roa_v4, net, bgp_path.last) != ROA_VALID) then {
                print "[DN42] ROA check failed for ", net, " ASN ", bgp_path.last, " from ", peeras;
                bgp_large_community.add((LOCAL_ASN, 99, peeras));
                return false;
        }
        if bgp_community ~ [(64511, 1..9)] then { default_local_pref = default_local_pref - update_latency(link_latency); }
        if bgp_community ~ [(64511, 21..29)] then { default_local_pref = default_local_pref + update_bandwidth(link_bandwidth) - 29; }
        if bgp_community ~ [(64511, 31..34)] then { default_local_pref = default_local_pref + update_crypto(link_crypto) - 34; }
        if bgp_path.last = bgp_path.first then default_local_pref = default_local_pref + 5;
        default_local_pref = default_local_pref - bgp_path.len + 1;
        bgp_local_pref = default_local_pref;
        return true;
}

function ebgp_peer_out_v4(int peeras) {
        if source !~ [RTS_STATIC, RTS_BGP] then return false;
        if net !~ DN42_VALID_PREFIXES_V4 then return false;
        if (LOCAL_ASN, 0, 666) ~ bgp_large_community then return false;
        if (LOCAL_ASN, 0, 6666) ~ bgp_large_community then return false;
        if (65535, 666) ~ bgp_community then return false;
        return true;
}

function ebgp_peer_in_v6(int peeras; int default_local_pref; int link_latency; int link_bandwidth; int link_crypto) {
        if net !~ DN42_VALID_PREFIXES_V6 then return false;
        if bgp_path ~ INTERNAL_ASN_SET then return false;
        bgp_large_community.delete([(LOCAL_ASN, *, *)]);
        bgp_large_community.add((LOCAL_ASN, 200, peeras));
        bgp_large_community.add((LOCAL_ASN, NODE_ID, peeras));
        if (roa_check(roa_v6, net, bgp_path.last) != ROA_VALID) then {
                print "[DN42] ROA check failed for ", net, " ASN ", bgp_path.last, " from ", peeras;
                bgp_large_community.add((LOCAL_ASN, 99, peeras));
                return false;
        }
        if bgp_community ~ [(64511, 1..9)] then { default_local_pref = default_local_pref - update_latency(link_latency); }
        if bgp_community ~ [(64511, 21..29)] then { default_local_pref = default_local_pref + update_bandwidth(link_bandwidth) - 29; }
        if bgp_community ~ [(64511, 31..34)] then { default_local_pref = default_local_pref + update_crypto(link_crypto) - 34; }
        if bgp_path.last = bgp_path.first then default_local_pref = default_local_pref + 5;
        default_local_pref = default_local_pref - bgp_path.len + 1;
        bgp_local_pref = default_local_pref;
        return true;
}

function ebgp_peer_out_v6(int peeras) {
        if source !~ [RTS_STATIC, RTS_BGP] then return false;
        if net !~ DN42_VALID_PREFIXES_V6 then return false;
        if (LOCAL_ASN, 0, 666) ~ bgp_large_community then return false;
        if (LOCAL_ASN, 0, 6666) ~ bgp_large_community then return false;
        if (65535, 666) ~ bgp_community then return false;
        return true;
}

template bgp dn42_ext_bgp {
        local as LOCAL_ASN;
        source address LOCAL_LL_IPV6;
        graceful restart;
        free bind;
        strict bind;
        enforce first as;
        enable extended messages;
        ipv4 {
                extended next hop;
                import none;
                export none;
                import keep filtered;
                import limit 2000 action block;
                export limit 2000 action block;
        };
        ipv6 {
                import none;
                export none;
                import keep filtered;
                import limit 2000 action block;
                export limit 2000 action block;
        };
}
������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/ibgp_filters.conf������������������������������������������������������������������������������0000644�0000000�0000000�00000005016�14266070337�013655� 0����������������������������������������������������������������������������������������������������ustar  �root����������������������������root�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������# Version: 2022072001

function ibgp_in_v4_filter(int default_local_pref; int link_latency; int link_bandwidth; int link_crypto)
bgppath tmp_path;
{
        if net !~ DN42_VALID_PREFIXES_V4 then return false;
        if bgp_community ~ [(64511, 1..9)] then { default_local_pref = default_local_pref - update_latency(link_latency); }
        if bgp_community ~ [(64511, 21..29)] then { default_local_pref = default_local_pref + update_bandwidth(link_bandwidth) - 29; }
        if bgp_community ~ [(64511, 31..34)] then { default_local_pref = default_local_pref + (update_crypto(link_crypto) - 34) * 10; }
        tmp_path = delete(bgp_path, INTERNAL_ASN_SET);
        if tmp_path.last = tmp_path.first then default_local_pref = default_local_pref + 8;
        default_local_pref = default_local_pref - tmp_path.len + 1;
        bgp_local_pref = default_local_pref;
        accept;
}

function ibgp_out_v4_filter() {
        if source !~ [RTS_STATIC, RTS_BGP] then reject;
        if (LOCAL_ASN, 0, 666) ~ bgp_large_community then return false;
        accept;
}

function ibgp_in_v6_filter(int default_local_pref; int link_latency; int link_bandwidth; int link_crypto)
bgppath tmp_path;
{
        if net !~ DN42_VALID_PREFIXES_V6 then return false;
        if bgp_community ~ [(64511, 1..9)] then { default_local_pref = default_local_pref - update_latency(link_latency); }
        if bgp_community ~ [(64511, 21..29)] then { default_local_pref = default_local_pref + update_bandwidth(link_bandwidth) - 29; }
        if bgp_community ~ [(64511, 31..34)] then { default_local_pref = default_local_pref + update_crypto(link_crypto) - 34; }
        tmp_path = delete(bgp_path, INTERNAL_ASN_SET);
        if tmp_path.last = tmp_path.first then default_local_pref = default_local_pref + 8;
        default_local_pref = default_local_pref - tmp_path.len + 1;
        bgp_local_pref = default_local_pref;
        accept;
}

function ibgp_out_v6_filter() {
        if source !~ [RTS_STATIC, RTS_BGP] then reject;
        if (LOCAL_ASN, 0, 666) ~ bgp_large_community then return false;
        accept;
}

template bgp dn42_int_bgp {
        local as INTERNAL_ASN;
        source address LOCAL_LL_IPV6;
        graceful restart;
        strict bind;
        free bind;
        direct;
        enable extended messages;
        ipv4 {
                next hop self;
                extended next hop;
                import none;
                export none;
        };
        ipv6 {
                next hop self;
                import none;
                export none;
        };
}
������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/blackhole.conf���������������������������������������������������������������������������������0000644�0000000�0000000�00000001334�14266067726�013137� 0����������������������������������������������������������������������������������������������������ustar  �root����������������������������root�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������# Version: 2022072001

protocol static BLACKHOLE_PREFIXS_V4 {
        ipv4 {
                import filter {
                        bgp_large_community.add((LOCAL_ASN, 666, NODE_ID));
                        accept;
                };
        };
        route 172.20.56.15/32 blackhole {
                bgp_large_community.add((LOCAL_ASN, 0, 666));
        };
}

protocol static BLACKHOLE_PREFIXS_V6 {
        ipv6 {
                import filter {
                        bgp_large_community.add((LOCAL_ASN, 666, NODE_ID));
                        accept;
                };
        };
        route fd00:bb:5bf3:ffff:ffff:ffff:ffff:ffff/128 blackhole {
                bgp_large_community.add((LOCAL_ASN, 0, 666));
        };
}
����������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/DN42_ROA_V6.conf�������������������������������������������������������������������������������0000777�0000000�0000000�00000000000�14266305672�011115� 0����������������������������������������������������������������������������������������������������ustar  ��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/announced.conf���������������������������������������������������������������������������������0000777�0000000�0000000�00000002423�14266135251�011351� 0����������������������������������������������������������������������������������������������������ustar  ��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������# Version: 2022072001

protocol static ANNOUNCED_PREFIXS_V4  {
        ipv4 {
                import filter {
                        if net !~ OUTPUT_PREFIX_V4 then {
                                bgp_large_community.add((4242420549, 0, 6666));
                        }
                        bgp_community.add((64511, DN42_NODE_BW));
                        bgp_community.add((64511, 34));
                        bgp_large_community.add((LOCAL_ASN, 100, NODE_ID));
                        accept;
                };
        };
        route 172.20.56.0/26 reject;
        route 172.20.56.56/29 reject;
}

protocol static ANNOUNCED_PREFIXS_V6 {
        ipv6 {
                import filter {
                        if net !~ ANYCAST_PREFIXS_V6 then {
                                bgp_community.add((64511, DN42_REGION));
                                bgp_community.add((64511, 1));
                        }
                        bgp_community.add((64511, DN42_NODE_BW));
                        bgp_community.add((64511, 34));
                        bgp_large_community.add((LOCAL_ASN, 100, NODE_ID));
                        accept;
                };
        };
        route fd00:bb:5bf3::/48 reject;
        route fd00:bb:5bf3::/64 reject;
        route __PREFIXS_V6__ reject;
}
���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/bird.conf��������������������������������������������������������������������������������������0000644�0000000�0000000�00000000702�14266066546�012130� 0����������������������������������������������������������������������������������������������������ustar  �root����������������������������root�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������# Version: 2022072101
log syslog all;

include "/etc/bird/dn42/constant.conf";
include "/etc/bird/dn42/boot.conf";
include "/etc/bird/dn42/announced.conf";
include "/etc/bird/dn42/blackhole.conf";
include "/etc/bird/dn42/roa.conf";
include "/etc/bird/dn42/community_filters.conf";
include "/etc/bird/dn42/ibgp_filters.conf";
include "/etc/bird/dn42/ebgp_filters.conf";
include "/etc/bird/dn42/internal/*.conf";
include "/etc/bird/dn42/peers/*.conf";
��������������������������������������������������������������dn42/roa.conf���������������������������������������������������������������������������������������0000777�0000000�0000000�00000000434�14266135323�010160� 0����������������������������������������������������������������������������������������������������ustar  ��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������# Version: 2022072101
roa4 table roa_v4;
roa6 table roa_v6;

protocol static ROA_V4 {
        roa4 { table roa_v4; };
        include "/etc/bird/dn42/DN42_ROA_V4.conf";
};

protocol static ROA_V6 {
        roa6 { table roa_v6; };
        include "/etc/bird/dn42/DN42_ROA_V6.conf";
};
������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/peers/�����������������������������������������������������������������������������������������0000755�0000000�0000000�00000000000�14266101256�011444� 5����������������������������������������������������������������������������������������������������ustar  �root����������������������������root�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/peers/ROUTE_COLLECTOR.conf���������������������������������������������������������������������0000644�0000000�0000000�00000002145�14266073042�014622� 0����������������������������������������������������������������������������������������������������ustar  �root����������������������������root�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������# Version: 2022072001

protocol bgp ROUTE_COLLECTOR {
        local as LOCAL_ASN;
        source address LOCAL_IPV6;
        neighbor fd42:4242:2601:ac12::1 as 4242422602;
        graceful restart;
        free bind;
        strict bind;
        enable extended messages;
        multihop;

        ipv4 {
                add paths tx;
                extended next hop;
                import none;
                export filter {
                        if net ~ DN42_VALID_PREFIXES_V4 && source ~ [RTS_STATIC, RTS_BGP] then {
                                bgp_path.delete(INTERNAL_ASN_SET);
                                accept;
                        }
                        reject;
                };
        };

        ipv6 {
                add paths tx;
                import none;
                export filter {
                        if net ~ DN42_VALID_PREFIXES_V6 && source ~ [RTS_STATIC, RTS_BGP] then {
                                bgp_path.delete(INTERNAL_ASN_SET);
                                accept;
                        }
                        reject;
                };
        };
}
���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/constant.conf����������������������������������������������������������������������������������0000777�0000000�0000000�00000002011�14266135277�011231� 0����������������������������������������������������������������������������������������������������ustar  ��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������# Version: 2022072001

define LOCAL_ASN = 4242420549;
define LOCAL_IPV4 = __LOCAL_IPV4__;
define LOCAL_IPV6 = __LOCAL_IPV6__;
define LOCAL_LL_IPV6 = __LOCAL_LL_IPV6__;
define NODE_ID = __NODE_ID__;

define INTERNAL_ASN = __INTERNAL_ASN__;
define INTERNAL_ASN_SET = [4205490000..4205499999];

define DN42_NODE_BW = __DN42_NODE_BW__;

define DN42_REGION = __DN42_REGION__;

define DN42_VALID_PREFIXES_V4 = [
        172.20.0.0/14{21,29},   # DN42
        172.20.0.0/24{28,32},   # DN42 Anycast
        172.21.0.0/24{28,32},   # DN42 Anycast
        172.22.0.0/24{28,32},   # DN42 Anycast
        172.23.0.0/24{28,32},   # DN42 Anycast
        172.31.0.0/16+,         # ChaosVPN
        10.100.0.0/14+,         # ChaosVPN
        10.127.0.0/16{16,32},   # neonetwork
        10.0.0.0/8{15,24}       # Freifunk.net
];

define DN42_VALID_PREFIXES_V6 = [
        fd00::/8{44,64}         # ULA address space as per RFC 4193
];

define OUTPUT_PREFIX_V4 = [172.20.56.0/26];

define ANYCAST_PREFIXS_V6 = [fd00:bb:5bf3::/48, fd00:bb:5bf3::/64];�����������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/community_filters.conf�������������������������������������������������������������������������0000644�0000000�0000000�00000005672�14266070123�014761� 0����������������������������������������������������������������������������������������������������ustar  �root����������������������������root�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������# Version: 2022072001

# (64511, 1) :: latency \in (0, 2.7ms]
# (64511, 2) :: latency \in (2.7ms, 7.3ms]
# (64511, 3) :: latency \in (7.3ms, 20ms]
# (64511, 4) :: latency \in (20ms, 55ms]
# (64511, 5) :: latency \in (55ms, 148ms]
# (64511, 6) :: latency \in (148ms, 403ms]
# (64511, 7) :: latency \in (403ms, 1097ms]
# (64511, 8) :: latency \in (1097ms, 2981ms]
# (64511, 9) :: latency > 2981ms
# (64511, x) :: latency \in [exp(x-1), exp(x)] ms (for x < 10)
function update_latency(int link_latency) {
        bgp_community.add((64511, link_latency));
        if (64511, 9) ~ bgp_community then { bgp_community.delete([(64511, 1..8)]); return 9; }
        else if (64511, 8) ~ bgp_community then { bgp_community.delete([(64511, 1..7)]); return 8; }
        else if (64511, 7) ~ bgp_community then { bgp_community.delete([(64511, 1..6)]); return 7; }
        else if (64511, 6) ~ bgp_community then { bgp_community.delete([(64511, 1..5)]); return 6; }
        else if (64511, 5) ~ bgp_community then { bgp_community.delete([(64511, 1..4)]); return 5; }
        else if (64511, 4) ~ bgp_community then { bgp_community.delete([(64511, 1..3)]); return 4; }
        else if (64511, 3) ~ bgp_community then { bgp_community.delete([(64511, 1..2)]); return 3; }
        else if (64511, 2) ~ bgp_community then { bgp_community.delete([(64511, 1..1)]); return 2; }
        else return 1;
}

function update_bandwidth(int link_bandwidth) {
        bgp_community.add((64511, link_bandwidth));
        if (64511, 21) ~ bgp_community then { bgp_community.delete([(64511, 22..29)]); return 21; }
        else if (64511, 22) ~ bgp_community then { bgp_community.delete([(64511, 23..29)]); return 22; }
        else if (64511, 23) ~ bgp_community then { bgp_community.delete([(64511, 24..29)]); return 23; }
        else if (64511, 24) ~ bgp_community then { bgp_community.delete([(64511, 25..29)]); return 24; }
        else if (64511, 25) ~ bgp_community then { bgp_community.delete([(64511, 26..29)]); return 25; }
        else if (64511, 26) ~ bgp_community then { bgp_community.delete([(64511, 27..29)]); return 26; }
        else if (64511, 27) ~ bgp_community then { bgp_community.delete([(64511, 28..29)]); return 27; }
        else if (64511, 28) ~ bgp_community then { bgp_community.delete([(64511, 29..29)]); return 28; }
        else return 29;
}


# (64511, 31) :: not encrypted
# (64511, 32) :: encrypted with unsafe vpn solution
# (64511, 33) :: encrypted with safe vpn solution (but no PFS)
# (64511, 34) :: encrypted with safe vpn solution with PFS (Perfect Forward Secrecy)
function update_crypto(int link_crypto) {
        bgp_community.add((64511, link_crypto));
        if (64511, 31) ~ bgp_community then { bgp_community.delete([(64511, 32..34)]); return 31; }
        else if (64511, 32) ~ bgp_community then { bgp_community.delete([(64511, 33..34)]); return 32; }
        else if (64511, 33) ~ bgp_community then { bgp_community.delete([(64511, 34..34)]); return 33; }
        else return 34;
}
����������������������������������������������������������������������dn42/DN42_ROA_V4.conf�������������������������������������������������������������������������������0000777�0000000�0000000�00000000000�14266305664�011114� 0����������������������������������������������������������������������������������������������������ustar  ��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/internal/��������������������������������������������������������������������������������������0000755�0000000�0000000�00000000000�14266132020�012133� 5����������������������������������������������������������������������������������������������������ustar  �root����������������������������root�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/internal/DN42_INT_OSPF.conf.bak����������������������������������������������������������������0000644�0000000�0000000�00000004513�14266070435�015564� 0����������������������������������������������������������������������������������������������������ustar  �root����������������������������root�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������protocol ospf v3 DN42_INT_OSPF_V4 {
        instance id 68;
        ipv4 {
                import filter {
                        if net ~ [172.20.56.0/26+] then accept; else reject;
                };
                export where source ~ [RTS_DEVICE, RTS_OSPF, RTS_OSPF_IA, RTS_OSPF_EXT1, RTS_OSPF_EXT2];
        };
        area 0 {
#                interface "dn42-int-can" {
#                        cost 10;
#                        priority 10;
#                        type ptp;
#                };
                interface "dn42-int-pek" {
                        cost 45;
                        priority 45;
                        type ptp;
                };
                interface "dn42-int-tyo" {
                        cost 50;
                        priority 50;
                        type ptp;
                };
                interface "dn42-int-las" {
                        cost 150;
                        priority 150;
                        type ptp;
                };
                interface "dn42-int-lux" {
                        cost 250;
                        priority 250;
                        type ptp;
                };
        };
}

protocol ospf v3 DN42_INT_OSPF_V6 {
        instance id 4;
        ipv6 {
                import filter {
                        if net ~ [fd00:bb:5bf3::/48+] then accept; else reject;
                };
                export where source ~ [RTS_DEVICE, RTS_OSPF, RTS_OSPF_IA, RTS_OSPF_EXT1, RTS_OSPF_EXT2];
        };
        area 0 {
#                interface "dn42-int-can" {
#                        cost 10;
#                        priority 10;
#                        type ptp;
#                };
                interface "dn42-int-pek" {
                        cost 45;
                        priority 45;
                        type ptp;
                };
                interface "dn42-int-tyo" {
                        cost 50;
                        priority 50;
                        type ptp;
                };
                interface "dn42-int-las" {
                        cost 150;
                        priority 150;
                        type ptp;
                };
                interface "dn42-int-lux" {
                        cost 250;
                        priority 250;
                        type ptp;
                };
        };
}
�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������dn42/internal/INT_BABEL.conf������������������������������������������������������������������������0000644�0000000�0000000�00000001014�14266132020�014315� 0����������������������������������������������������������������������������������������������������ustar  �root����������������������������root�������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������protocol babel INT_BABEL {
        ipv4 {
                import filter {
                        if net ~ [172.20.56.0/26+] then accept; else reject;
                };
                export where (source = RTS_DEVICE) || (source = RTS_BABEL);
        };
        ipv6 {
                import filter {
                        if net ~ [fd00:bb:5bf3::/48+] then accept; else reject;
                };
                export where (source = RTS_DEVICE) || (source = RTS_BABEL);
        };
        interface "dn42-int-*";
}
������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������
